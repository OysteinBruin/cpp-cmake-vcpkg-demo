name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh
        ./vcpkg/vcpkg install sdl2:x64-linux

    - name: Build Linux
      run: |
        cmake -B build-linux -S . \
          -GNinja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        cmake --build build-linux

    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-build
        path: build-linux/bin/*

  build-windows:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build mingw-w64

    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh
        ./vcpkg/vcpkg install sdl2:x64-mingw-dynamic

    - name: Build Windows
      run: |
        cmake -B build-windows -S . \
          -GNinja \
          -DTARGET_WINDOWS=ON \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        cmake --build build-windows

    - name: Prepare Windows Package
      run: |
        mkdir -p deploy/windows
        cp build-windows/bin/*.exe deploy/windows/
        cp build-windows/bin/*.dll deploy/windows/
        
        # Find and copy MinGW runtime DLLs
        MINGW_PATH=$(dirname $(which x86_64-w64-mingw32-g++))/../x86_64-w64-mingw32
        cp $(find $MINGW_PATH -name "libstdc++-6.dll" | head -n 1) deploy/windows/
        cp $(find $MINGW_PATH -name "libgcc_s_seh-1.dll" | head -n 1) deploy/windows/
        cp $(find $MINGW_PATH -name "libwinpthread-1.dll" | head -n 1) deploy/windows/
        
        # Create test batch file
        echo "@echo off" > deploy/windows/test.bat
        echo "echo Testing SDL2 Application" >> deploy/windows/test.bat
        echo "cross_platform_example.exe" >> deploy/windows/test.bat
        echo "pause" >> deploy/windows/test.bat
        
        cd deploy/windows
        zip -r ../windows-build.zip *

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: deploy/windows-build.zip

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    # Modified condition to run on both push to main and tags
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: linux-build
        path: linux-build

    - uses: actions/download-artifact@v3
      with:
        name: windows-build
        path: windows-build

    - name: Create Release
      uses: softprops/action-gh-release@v1
      # Create a release only for tags
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          linux-build/*
          windows-build/windows-build.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Add a step to create artifacts even when not creating a release
    - name: Archive builds
      if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v3
      with:
        name: all-builds
        path: |
          linux-build/*
          windows-build/windows-build.zip